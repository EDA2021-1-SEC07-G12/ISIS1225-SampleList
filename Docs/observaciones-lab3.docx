¿Cuáles son los mecanismos de interacción (I/O: Input/Output) que tiene el view.py con el 
usuario?:

Primeramente el programa solicita un input sobre las 5 primeras opciones de la aplicacion:
1.Cargar informacion del catalogo
2.Consultar los Top x libros por promedio
3.Consultar los libros de un autor
4.Libros por genero
0.Salir

En la opción 1 el programa muestra al usuario la informacion de catalogo.

En la opcion 2 solicita un input la usuario para gracias a él generar el output del autor solicitado por el usuario.

En la opción 3 el programa solicita un input al usuario para iniciar la busqueda de los libros del autor solicitado, y después genera un output con los datos introducidos.

En la opción 4 el programa solicita el género el cual el usuario quiere consultar y solicita una etiqueta para mostrar los datos solicitados.

-Estas opciones le permiten al usuario tener una mayor claridad del programa, de sus funciones, eficiencia, y de esta forma que la interacción sea mucho mas amigable con el programa.

• ¿Cómo se almacenan los datos de GoodReads en el model.py?:

En primera instancia se cargan varias listas vacias con la función newCatalog(). Esta función crea un diccionario con distintas llaves como author, id, name, etc. Las cuales se encuentran vacias.
Además, se crean mas funciones, las cuales dependiendo la necesidad del usuario, se puede agregar diferente informacion al diccionario creado.
La estructura más usada es el "ARRAY_LIST", además, de no solo subir los datos, tambien se encarga de crear nuevos datos en caso de ser necesario.

• ¿Cuáles son las funciones que comunican el view.py y el model.py?

El view.py se comunica con el model.py a través del controller.py, este último es el encargado de organizar los datos en las estructuras de datos
creadas por el model.py y adecuar la informacion la información dependiendo de la necesidad del usuario. Una vez el controller.py halla adecuado/filtrado
la informacion será enviada hacia el view.py para que sea mostrada al usuario.

Las funciones que comunican el controller.py y el view.py son teniendo en cuenta que son llamadas desde el view:

-initCatalog(), esta función le dice al controller.py iniciar el catalogo de libros.
-loadData(), esta función le dice al controller.py cargar los datos del CSV.
-Estas son funciones son principalmente ejecutadas desde el view, tambien el view.py se comunica con el controller.py a través del menu principal
cada vez que se informacion especifica como Nombre del autor, etiqueta, y mejores libros.

Todas las funciones del controller.py se encuentran relacionadas con el model.py, debido a que es el encargado de crear las estructuras que van a ser almacenadas.
Por ende, sirve de puente entre el view.py y el model.py

PASO 4:

• ¿Cómo se crea una lista?

-Se crea a partir de una función llamada newList(datastructure, cmpfunction, key, filename, delimiter) la cual recibe principalmente la estructura de datos a usar.
Además evidenciamos que se puede comparar informacion bajo ciertos parametros, sin embargo, en este caso, estos parametros vienen vacios por defecto.
y por último hay un parametro de delimitador que ayuda a separar la informacion mediante un caracter especial, para así cargar los datos,  siendo la coma "," por defecto

• ¿Qué hace el parámetro cmpfunction=None en la función newList()?
Si este parametro se encuentra en None, ningun elemento de la nueva lista será comparado a partir de las función. en caso de que este parametro tenga el nombre de una función.
La función va a raelizar las comparaciones de acuerdo al programa para, por ejemplo, descartar nombres ya existentes en la lista.
• ¿Qué hace la función addLast()?:
Recibe como parametro la lista y el elemento que quiere ser agregado. Este elemento es agregado en la última posición de la lista encadenada creada y el que antes era el último elemento actualiza su apuntador, al nuevo último elemento y ademas el tamaño de la lista se incrementa en 1.

• ¿Qué hace la función getElement()?

Recibe como parametro la lista y la posición del elemento que quiere ser consultado, al ser una lista encadenada, se debe recorrer cada uno de los elementos hasta llegar a la posición buscada.

• ¿Qué hace la función subList()?

Recibe como parametro la lista a examinar, la  posición a partir de la que se desea obtener la sublista y el numero de elementos a copiar en la sublista.

Esta función recorre la lista encadenada hasta encontrar el elemento en la posición deseada y a partir de ese momento, empieza a contar y agregar la cantidad de elementos deseada.
Esta sublista es una copia de los elementos que se agregaron

PASO 5: 
• ¿Observó algún cambio en el comportamiento del programa al cambiar la implementación del
parámetro “ARRAY_LIST” a “SINGLE_LINKED”?:

Sí, evidenciamos que hubo un cambio en el tiempo de respuesta del programa para mostrar la informacion al usuario e internamente, creemos que al ser una estructura más compleja esta tardará más tiempo en organizar los datos.